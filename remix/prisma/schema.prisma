generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("CDB_URL")
}

// the server users log in to, we need to register as an app with each one
model Instance {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  url             String
  clientKey       String?
  clientSecret    String?
  users           User[]
  posts           Post[]
  notifications   Notification[]
  timelineEntries TimelineEntry[]

  @@unique([name])
  @@index([name], map: "names")
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // internal only
  username      String // external
  userInstance  String // external
  instance      Instance        @relation(fields: [userInstance], references: [name])
  display_name  String? // just to aid review; real data is in JSON
  json          Json            @db.JsonB
  posts         Post[]
  timeline      TimelineEntry[]
  notifications Notification[]

  @@unique([username, userInstance])
  @@index([username, userInstance], map: "external_accounts")
}

model Post {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // internal only
  permalink      String // the data doesn't have this one
  text           String // just to aid review
  hash           String // derived from text, avoids dupes, makes for unique ID
  createdAt      DateTime // allows for sorting
  json           Json            @db.JsonB // most data in here
  author         User            @relation(fields: [authorName, authorInstance], references: [username, userInstance])
  authorName     String
  authorInstance String
  instance       Instance        @relation(fields: [authorInstance], references: [name])
  timelineEntry  TimelineEntry[]

  @@unique([authorName, authorInstance, hash])
  @@index([authorName, authorInstance], map: "posts_by_author")
  @@index([authorName, authorInstance, hash], map: "post_by_author")
}

model TimelineEntry {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // internal only
  seenAt         DateTime @default(now())
  post           Post     @relation(fields: [authorName, authorInstance, postHash], references: [authorName, authorInstance, hash])
  authorName     String
  authorInstance String
  postHash       String
  viewer         User     @relation(fields: [viewerName, viewerInstance], references: [username, userInstance])
  instance       Instance @relation(fields: [viewerInstance], references: [name])
  viewerName     String
  viewerInstance String

  @@unique([viewerName, viewerInstance, authorName, authorInstance, seenAt])
  @@index([viewerName, viewerInstance], map: "entries_for_viewer")
  @@index([viewerName, viewerInstance, seenAt], map: "entries_for_viewer_by_time")
}

model Notification {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // internal only
  createdAt      DateTime // when were they notified
  type           String // what kind of notification
  json           Json     @db.JsonB // the notification itself
  hash           String // used to prevent dupes, hashes notification data
  viewer         User     @relation(fields: [viewerName, viewerInstance], references: [username, userInstance])
  viewerName     String // who was notified
  viewerInstance String // who was notified
  instance       Instance @relation(fields: [viewerInstance], references: [name])

  @@unique([viewerName, viewerInstance, hash])
  @@index([viewerName, viewerInstance], map: "notifications_for_viewer")
  @@index([viewerName, viewerInstance, createdAt], map: "notifications_for_viewer_by_time")
}
