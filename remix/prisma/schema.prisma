generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("CDB_URL")
}

// the server users log in to, we need to register as an app with each one
model Instance {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  url             String
  clientKey       String?
  clientSecret    String?
  users           User[]
  tweets          Tweet[]
  timelineEntries TimelineEntry[]
  notifications   Notification[]

  @@unique([name])
  @@index([name], map: "names")
}

model User {
  instance      Instance        @relation(fields: [instanceId], references: [id])
  instanceId    String          @db.Uuid // our internal instance ID
  id            String // mastodon ref imp uses integer IDs but is that mandator?
  username      String
  display_name  String?
  avatar        String?
  header        String?
  json          Json            @db.JsonB
  tweets        Tweet[]
  timeline      TimelineEntry[]
  notifications Notification[]

  @@id([instanceId, id])
  @@unique([username, instanceId])
  @@index([id], map: "user_ids")
  @@index([username, instanceId], map: "usernames")
}

model Tweet {
  id            String
  permalink     String
  text          String
  createdAt     DateTime
  author        User            @relation(fields: [authorId, instanceId], references: [id, instanceId])
  authorId      String // same id as User table so mastodon ID, needs instance to be unique
  instance      Instance        @relation(fields: [instanceId], references: [id])
  instanceId    String          @db.Uuid // internal instance ID from Instance table
  json          Json            @db.JsonB
  timelineEntry TimelineEntry[]

  @@id([id, instanceId])
}

model TimelineEntry {
  id              String // mastodon ID, needs instance to be unique
  instance        Instance @relation(fields: [instanceId], references: [id])
  instanceId      String   @db.Uuid // this is the instance of the view
  seenAt          DateTime @default(now())
  viewer          User     @relation(fields: [viewerId, instanceId], references: [id, instanceId])
  viewerId        String
  tweet           Tweet    @relation(fields: [tweetId, tweetInstanceId], references: [id, instanceId])
  tweetId         String
  tweetInstanceId String   @db.Uuid

  @@id([id, instanceId])
}

model Notification {
  id             String // mastodon ID, needs instance to be unique
  instance       Instance @relation(fields: [instanceId], references: [id]) // this is the instance of the event
  instanceId     String   @db.Uuid
  createdAt      DateTime
  type           String
  json           Json     @db.JsonB
  user           User     @relation(fields: [userId, instanceId], references: [id, instanceId])
  userId         String

  @@id([id, instanceId])
}
